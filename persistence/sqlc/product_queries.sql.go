// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
insert
	into product
		( subcategory_id, name, description, price, cost, quantity, size_code, color_id, brand, sku, upc, image_url,
		  source_id, source_url, is_offered, offer_percent )
	values
		( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16 )
	returning id
`

type CreateProductParams struct {
	SubcategoryID int32
	Name          string
	Description   sql.NullString
	Price         string
	Cost          string
	Quantity      int32
	SizeCode      string
	ColorID       int32
	Brand         string
	Sku           string
	Upc           string
	ImageUrl      string
	SourceID      int32
	SourceUrl     sql.NullString
	IsOffered     bool
	OfferPercent  sql.NullInt32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.SubcategoryID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.Cost,
		arg.Quantity,
		arg.SizeCode,
		arg.ColorID,
		arg.Brand,
		arg.Sku,
		arg.Upc,
		arg.ImageUrl,
		arg.SourceID,
		arg.SourceUrl,
		arg.IsOffered,
		arg.OfferPercent,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createProductCategory = `-- name: CreateProductCategory :one
insert
	into product_category
		( name, description )
	values
		( $1, $2 )
	returning id
`

type CreateProductCategoryParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.Name, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createProductSource = `-- name: CreateProductSource :one
insert
	into product_source
		( name )
	values
		( $1 )
	returning id
`

func (q *Queries) CreateProductSource(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProductSource, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createProductSubcategory = `-- name: CreateProductSubcategory :one
insert
	into product_subcategory
		( parent_category_id, name, description )
	values
		( $1, $2, $3 )
	returning id
`

type CreateProductSubcategoryParams struct {
	ParentCategoryID int32
	Name             string
	Description      string
}

func (q *Queries) CreateProductSubcategory(ctx context.Context, arg CreateProductSubcategoryParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProductSubcategory, arg.ParentCategoryID, arg.Name, arg.Description)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getProductById = `-- name: GetProductById :one
select product_id, category_id, category_name, category_description, subcategory_id, subcategory_parent_category_id, subcategory_name, subcategory_description, product_name, product_description, product_price, product_cost, product_quantity, size_code, size_description, color_id, color_name, color_hex, product_brand, product_sku, product_upc, product_image_url, source_id, source_name, product_source_url, product_is_offered, product_offer_percent, product_is_active, product_created_at, product_updated_at
	from product_view
	where product_id = $1
`

func (q *Queries) GetProductById(ctx context.Context, productID int32) (ProductView, error) {
	row := q.db.QueryRowContext(ctx, getProductById, productID)
	var i ProductView
	err := row.Scan(
		&i.ProductID,
		&i.CategoryID,
		&i.CategoryName,
		&i.CategoryDescription,
		&i.SubcategoryID,
		&i.SubcategoryParentCategoryID,
		&i.SubcategoryName,
		&i.SubcategoryDescription,
		&i.ProductName,
		&i.ProductDescription,
		&i.ProductPrice,
		&i.ProductCost,
		&i.ProductQuantity,
		&i.SizeCode,
		&i.SizeDescription,
		&i.ColorID,
		&i.ColorName,
		&i.ColorHex,
		&i.ProductBrand,
		&i.ProductSku,
		&i.ProductUpc,
		&i.ProductImageUrl,
		&i.SourceID,
		&i.SourceName,
		&i.ProductSourceUrl,
		&i.ProductIsOffered,
		&i.ProductOfferPercent,
		&i.ProductIsActive,
		&i.ProductCreatedAt,
		&i.ProductUpdatedAt,
	)
	return i, err
}

const getProductCategoryById = `-- name: GetProductCategoryById :one
select id, name, description
	from product_category
	where
		id = $1
`

func (q *Queries) GetProductCategoryById(ctx context.Context, id int32) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryById, id)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getProductColorById = `-- name: GetProductColorById :one
select id, name, hex
	from product_color
	where
		id = $1
`

func (q *Queries) GetProductColorById(ctx context.Context, id int32) (ProductColor, error) {
	row := q.db.QueryRowContext(ctx, getProductColorById, id)
	var i ProductColor
	err := row.Scan(&i.ID, &i.Name, &i.Hex)
	return i, err
}

const getProductSizeByCode = `-- name: GetProductSizeByCode :one
select code, description
	from product_size
	where
		code = $1
`

func (q *Queries) GetProductSizeByCode(ctx context.Context, code string) (ProductSize, error) {
	row := q.db.QueryRowContext(ctx, getProductSizeByCode, code)
	var i ProductSize
	err := row.Scan(&i.Code, &i.Description)
	return i, err
}

const getProductSourceById = `-- name: GetProductSourceById :one
select id, name
	from product_source
	where
		id = $1
`

func (q *Queries) GetProductSourceById(ctx context.Context, id int32) (ProductSource, error) {
	row := q.db.QueryRowContext(ctx, getProductSourceById, id)
	var i ProductSource
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProductSubcategoryByCategoryId = `-- name: GetProductSubcategoryByCategoryId :many
select id, parent_category_id, name, description
	from product_subcategory
	where
		parent_category_id = $1
`

func (q *Queries) GetProductSubcategoryByCategoryId(ctx context.Context, parentCategoryID int32) ([]ProductSubcategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductSubcategoryByCategoryId, parentCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSubcategory
	for rows.Next() {
		var i ProductSubcategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentCategoryID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSubcategoryById = `-- name: GetProductSubcategoryById :one
select id, parent_category_id, name, description
	from product_subcategory
	where
		id = $1
`

func (q *Queries) GetProductSubcategoryById(ctx context.Context, id int32) (ProductSubcategory, error) {
	row := q.db.QueryRowContext(ctx, getProductSubcategoryById, id)
	var i ProductSubcategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoryID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
select product_id, category_id, category_name, category_description, subcategory_id, subcategory_parent_category_id, subcategory_name, subcategory_description, product_name, product_description, product_price, product_cost, product_quantity, size_code, size_description, color_id, color_name, color_hex, product_brand, product_sku, product_upc, product_image_url, source_id, source_name, product_source_url, product_is_offered, product_offer_percent, product_is_active, product_created_at, product_updated_at from product_view
`

func (q *Queries) GetProducts(ctx context.Context) ([]ProductView, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductView
	for rows.Next() {
		var i ProductView
		if err := rows.Scan(
			&i.ProductID,
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.SubcategoryID,
			&i.SubcategoryParentCategoryID,
			&i.SubcategoryName,
			&i.SubcategoryDescription,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductPrice,
			&i.ProductCost,
			&i.ProductQuantity,
			&i.SizeCode,
			&i.SizeDescription,
			&i.ColorID,
			&i.ColorName,
			&i.ColorHex,
			&i.ProductBrand,
			&i.ProductSku,
			&i.ProductUpc,
			&i.ProductImageUrl,
			&i.SourceID,
			&i.SourceName,
			&i.ProductSourceUrl,
			&i.ProductIsOffered,
			&i.ProductOfferPercent,
			&i.ProductIsActive,
			&i.ProductCreatedAt,
			&i.ProductUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
