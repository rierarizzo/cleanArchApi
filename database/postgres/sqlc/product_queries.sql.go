// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_queries.sql

package sqlc

import (
	"context"
)

const getProductCategoryById = `-- name: GetProductCategoryById :one
select id, parent_category_id, name, description from product_category where id = $1
`

func (q *Queries) GetProductCategoryById(ctx context.Context, id int32) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryById, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoryID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getProductColorById = `-- name: GetProductColorById :one
select id, name, hex from product_color where id = $1
`

func (q *Queries) GetProductColorById(ctx context.Context, id int32) (ProductColor, error) {
	row := q.db.QueryRowContext(ctx, getProductColorById, id)
	var i ProductColor
	err := row.Scan(&i.ID, &i.Name, &i.Hex)
	return i, err
}

const getProductSizeByCode = `-- name: GetProductSizeByCode :one
select code, description from product_size where code = $1
`

func (q *Queries) GetProductSizeByCode(ctx context.Context, code string) (ProductSize, error) {
	row := q.db.QueryRowContext(ctx, getProductSizeByCode, code)
	var i ProductSize
	err := row.Scan(&i.Code, &i.Description)
	return i, err
}

const getProductSourceById = `-- name: GetProductSourceById :one
select id, name from product_source where id = $1
`

func (q *Queries) GetProductSourceById(ctx context.Context, id int32) (ProductSource, error) {
	row := q.db.QueryRowContext(ctx, getProductSourceById, id)
	var i ProductSource
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProjects = `-- name: GetProjects :many
select id, category_id, name, description, price, cost, quantity, size_code, color_id, brand, sku, upc, image_url, source_id, source_url, offer, offer_percent, active, created_at, updated_at from product
`

func (q *Queries) GetProjects(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.Cost,
			&i.Quantity,
			&i.SizeCode,
			&i.ColorID,
			&i.Brand,
			&i.Sku,
			&i.Upc,
			&i.ImageUrl,
			&i.SourceID,
			&i.SourceUrl,
			&i.Offer,
			&i.OfferPercent,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
