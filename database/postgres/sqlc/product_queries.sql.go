// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getProductCategoryById = `-- name: GetProductCategoryById :one
select id, name, description
from product_category
where id = $1
`

func (q *Queries) GetProductCategoryById(ctx context.Context, id int32) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategoryById, id)
	var i ProductCategory
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getProductColorById = `-- name: GetProductColorById :one
select id, name, hex
from product_color
where id = $1
`

func (q *Queries) GetProductColorById(ctx context.Context, id int32) (ProductColor, error) {
	row := q.db.QueryRowContext(ctx, getProductColorById, id)
	var i ProductColor
	err := row.Scan(&i.ID, &i.Name, &i.Hex)
	return i, err
}

const getProductSizeByCode = `-- name: GetProductSizeByCode :one
select code, description
from product_size
where code = $1
`

func (q *Queries) GetProductSizeByCode(ctx context.Context, code string) (ProductSize, error) {
	row := q.db.QueryRowContext(ctx, getProductSizeByCode, code)
	var i ProductSize
	err := row.Scan(&i.Code, &i.Description)
	return i, err
}

const getProductSourceById = `-- name: GetProductSourceById :one
select id, name
from product_source
where id = $1
`

func (q *Queries) GetProductSourceById(ctx context.Context, id int32) (ProductSource, error) {
	row := q.db.QueryRowContext(ctx, getProductSourceById, id)
	var i ProductSource
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProductSubcategoryByCategoryId = `-- name: GetProductSubcategoryByCategoryId :many
select id, parent_category_id, name, description
from product_subcategory
where parent_category_id = $1
`

func (q *Queries) GetProductSubcategoryByCategoryId(ctx context.Context, parentCategoryID int32) ([]ProductSubcategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductSubcategoryByCategoryId, parentCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductSubcategory
	for rows.Next() {
		var i ProductSubcategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentCategoryID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductSubcategoryById = `-- name: GetProductSubcategoryById :one
select id, parent_category_id, name, description
from product_subcategory
where id = $1
`

func (q *Queries) GetProductSubcategoryById(ctx context.Context, id int32) (ProductSubcategory, error) {
	row := q.db.QueryRowContext(ctx, getProductSubcategoryById, id)
	var i ProductSubcategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoryID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
select pro.id                       as "product_id",
       pro_ca.id                    as "category_id",
       pro_ca.name                  as "category_name",
       pro_ca.description           as "category_description",
       pro_subca.id                 as "subcategory_id",
       pro_subca.parent_category_id as "subcategory_parent_category_id",
       pro_subca.name               as "subcategory_name",
       pro_subca.description        as "subcategory_description",
       pro.name                     as "product_name",
       pro.description              as "product_description",
       pro.price                    as "product_price",
       pro.cost                     as "product_cost",
       pro.quantity                 as "product_quantity",
       pro_si.code                  as "size_code",
       pro_si.description           as "size_description",
       pro_co.id                    as "color_id",
       pro_co.name                  as "color_name",
       pro_co.hex                   as "color_hex",
       pro.brand                    as "product_brand",
       pro.sku                      as "product_sku",
       pro.upc                      as "product_upc",
       pro.image_url                as "product_image_url",
       pro_so.id                    as "source_id",
       pro_so.name                  as "source_name",
       pro.source_url               as "product_source_url",
       pro.is_offered               as "product_is_offered",
       pro.offer_percent            as "product_offer_percent",
       pro.is_active                as "product_is_active",
       pro.created_at               as "product_created_at",
       pro.updated_at               as "product_updated_at"
from product as pro
         inner join product_subcategory as pro_subca on pro.subcategory_id = pro_subca.id
         inner join product_category as pro_ca on pro_subca.parent_category_id = pro_ca.id
         inner join product_size as pro_si on pro.size_code = pro_si.code
         inner join product_color as pro_co on pro.color_id = pro_co.id
         inner join product_source as pro_so on pro.source_id = pro_so.id
`

type GetProjectsRow struct {
	ProductID                   int32
	CategoryID                  int32
	CategoryName                string
	CategoryDescription         string
	SubcategoryID               int32
	SubcategoryParentCategoryID int32
	SubcategoryName             string
	SubcategoryDescription      string
	ProductName                 string
	ProductDescription          sql.NullString
	ProductPrice                string
	ProductCost                 string
	ProductQuantity             int32
	SizeCode                    string
	SizeDescription             string
	ColorID                     int32
	ColorName                   string
	ColorHex                    string
	ProductBrand                string
	ProductSku                  string
	ProductUpc                  string
	ProductImageUrl             string
	SourceID                    int32
	SourceName                  string
	ProductSourceUrl            sql.NullString
	ProductIsOffered            bool
	ProductOfferPercent         sql.NullInt32
	ProductIsActive             bool
	ProductCreatedAt            sql.NullTime
	ProductUpdatedAt            sql.NullTime
}

func (q *Queries) GetProjects(ctx context.Context) ([]GetProjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectsRow
	for rows.Next() {
		var i GetProjectsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.CategoryID,
			&i.CategoryName,
			&i.CategoryDescription,
			&i.SubcategoryID,
			&i.SubcategoryParentCategoryID,
			&i.SubcategoryName,
			&i.SubcategoryDescription,
			&i.ProductName,
			&i.ProductDescription,
			&i.ProductPrice,
			&i.ProductCost,
			&i.ProductQuantity,
			&i.SizeCode,
			&i.SizeDescription,
			&i.ColorID,
			&i.ColorName,
			&i.ColorHex,
			&i.ProductBrand,
			&i.ProductSku,
			&i.ProductUpc,
			&i.ProductImageUrl,
			&i.SourceID,
			&i.SourceName,
			&i.ProductSourceUrl,
			&i.ProductIsOffered,
			&i.ProductOfferPercent,
			&i.ProductIsActive,
			&i.ProductCreatedAt,
			&i.ProductUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
